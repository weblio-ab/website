name: Deploy Application
on:
  push:
    branches:
      - master
      - development
  pull_request:
    branches:
      - master
      - development
    types: [closed]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'development'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || (github.ref == 'refs/heads/master' && 'production' || 'staging') }}
    
    env:
      ENVIRONMENT_NAME: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || (github.ref == 'refs/heads/master' && 'production' || 'staging') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || github.ref }}
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ vars.PNPM_VERSION || '9' }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ vars.NODE_VERSION || '20' }}
        cache: 'pnpm'
    
    - name: Install dependencies
      run: ${{ vars.INSTALL_COMMAND || 'pnpm install' }}
      
    - name: Build frontend
      run: ${{ vars.BUILD_COMMAND || 'pnpm run build' }}
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, curl, zip, openssl
        tools: composer:v2
        
    - name: Install PHP dependencies
      run: |
        echo "📦 Installing PHPMailer via Composer"
        cd api
        composer install --no-dev --optimize-autoloader --no-interaction
        
        # Verify installation
        if [ -f "phpmailer/phpmailer/src/PHPMailer.php" ]; then
          echo "✅ PHPMailer installed successfully at phpmailer/phpmailer/src/"
        elif [ -f "vendor/phpmailer/phpmailer/src/PHPMailer.php" ]; then
          echo "✅ PHPMailer installed successfully at vendor/phpmailer/phpmailer/src/"
        else
          echo "❌ PHPMailer installation failed"
          echo "📁 Checking directory structure:"
          find . -name "PHPMailer.php" -type f
          exit 1
        fi
    
    - name: Configure backend settings
      env:
        RECAPTCHA_SECRET: ${{ secrets.RECAPTCHA_SECRET_KEY }}
        SMTP_HOST: ${{ secrets.SMTP_HOST }}
        SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        SMTP_ENCRYPTION: ${{ secrets.SMTP_ENCRYPTION }}
        SMTP_FROM_EMAIL: ${{ secrets.SMTP_FROM_EMAIL }}
        SMTP_FROM_NAME: ${{ secrets.SMTP_FROM_NAME }}
        CONTACT_EMAIL: ${{ secrets.CONTACT_EMAIL }}
      run: |
        echo "🔧 Configuring backend for ${{ env.ENVIRONMENT_NAME }} environment"
        
        # Create environment configuration file
        cat > api/.env << EOF
        SMTP_HOST=${SMTP_HOST}
        SMTP_USERNAME=${SMTP_USERNAME}
        SMTP_PASSWORD=${SMTP_PASSWORD}
        SMTP_PORT=${SMTP_PORT:-587}
        SMTP_ENCRYPTION=${SMTP_ENCRYPTION:-tls}
        SMTP_FROM_EMAIL=${SMTP_FROM_EMAIL}
        SMTP_FROM_NAME=${SMTP_FROM_NAME:-WebbenKelt}
        CONTACT_EMAIL=${CONTACT_EMAIL}
        RECAPTCHA_SECRET=${RECAPTCHA_SECRET}
        EOF
        
        echo "✅ Backend configuration completed successfully"
    
    - name: Prepare deployment structure
      run: |
        echo "📁 Preparing deployment structure"
        
        # Create deployment directory structure
        BUILD_DIR="${{ vars.BUILD_DIR || './dist' }}"
        
        # Copy API files into the build directory
        if [ -d "$BUILD_DIR" ]; then
          cp -r api "$BUILD_DIR/"
          echo "✅ API files copied to $BUILD_DIR/api/"
        else
          echo "❌ Build directory $BUILD_DIR not found"
          exit 1
        fi
        
    - name: Deploy to FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ${{ vars.BUILD_DIR || './dist/' }}
        server-dir: ${{ secrets.DEPLOY_PATH }}
          
    - name: Deployment notification
      run: |
        echo "✅ Application successfully deployed to ${{ env.ENVIRONMENT_NAME }} environment"
        echo "📁 Deployed to: ${{ secrets.DEPLOY_PATH }}"
        echo "🎯 Frontend: Static files deployed to root"
        echo "🎯 Backend: API deployed to /api/ subdirectory"
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "🚀 Manual deployment triggered"
          echo "📋 Branch: ${{ github.event.inputs.branch }}"
          echo "🎯 Environment: ${{ github.event.inputs.environment }}"
        fi
